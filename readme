//question shall we write writefile or writefilesync ?? [Event Loop Lecture]
//section6 lecture of nodejs is very important

import { useReducer } from "react"

//env variables - express apps can run on different env like development or prod and different databases
// - by dafult express sets up in development

//IN NODEJONS copy section 6 is written
//qUESTION - How to import data from JSON and save it to MONGOdb
// answer --->> section 8 video no 94

// making api better filtering - QUERY STRING
// making api better filtering - QUERY STRING

//there are four types of middleware in mongoose
1 - document
2 - query
3 - agrregate
4 - model

// REACT TUTTORIAL JONAS

// in react form section 6 we have started far away project
// react lecture video no 79 fundamentals of state management
// far away project of section 6 is used in section 7
// section 7 is very important
// by lifitng state up we can share one piece of state with multiple components in different positions of component tree

//video lectur 91 learn about children prop

UseEffect----------->>
    // starting with section 12 effect and data fetching
    // video 143 useEffect to the rescue - dont directly fetch the api data inside render it will go into infinite loop rather use inside useEffect
    //by default effects run after every render. we can prevent that by passing a dependency array
    //without dependency array , React doesnt know when to run the effect
    every state variable and prop used inside the effect must be included in dependency array

useReducer hook is a pure function which takes previous state and action it will then return the next state
when components have a lot of statevariables and state updates spread across many event handlers all over the component
when multiple state updates need to happen at the same time
when updating one piece of state depends on one or multiple other pieces of state

//reducer function contains all the logic to update state
//reducer are pure function - no sideEffects that takes current state and action and returns the next state
action describes how to update the state

function reducer(state, action) {
    switch (action.type) {
        case: "INC":
            return state + 1
    }
}

dispatch function tigger updates by sending action from event handler to the reducer
const [state, dispatch] = useReducer(reducer, initialState)

flow
update state in a component
    |
|
    dispatch--------------> reducer it will take current state and the action-------------------------> re - render
        |  
|
        ----------------------------it will return next state
action
type = "updateDay"
payload 23

bank example
customer is the dispatcher - who request the update
Bank Manager is the reducer - who make the update
valut = is the state----- What needs to be updated

action------------>
    type: "withdraw"
payload: {
    amount: 5000,
        accountNum: 1234567890
}




------------------------------------------- Redux------------------------------------------------------------------------------------
    //  i redux we have-------------->

    event handler-------------> dispatch-------> STORE - all Global state lives in the centralise container-- > NEXT STATE-- -> rerender


//  but we studied in useReducer

 event handler---------------> dispatch(customer)-------> reducer(Bank Manager)---------------> NEXT STATE--------> re - render



redux contd----

    eventHandler-- -> Action creator function ---> dispatch-- -> STORE----> NEXT STATE----> RE - RENDER
        in store multiple reducer can live 
 why multiple reducer in one store
eg - shopping cart one reducer for cart one for user and one for color theme



start from video 271 i.e redux api call 

meanwhile start practice on useReducer and useContext hook